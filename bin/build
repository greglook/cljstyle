#!/usr/bin/env bash
# vim: ft=bash

set -e

cd "$(dirname "${BASH_SOURCE[0]}")/.."

if [[ $1 = clean ]]; then
    rm -rf out target

elif [[ $1 = hiera ]]; then
    shift
    exec clojure -X:hiera "$@"

elif [[ $1 = setup-musl ]]; then
    # This should only really run in the context of the Docker image builder for static binaries
    apt install -y musl-tools
    ZLIB_VERSION="1.2.13"
    curl -sLO --fail --show-error "https://zlib.net/fossils/zlib-${ZLIB_VERSION}.tar.gz"
    tar xf "zlib-${ZLIB_VERSION}.tar.gz"
    cd "zlib-${ZLIB_VERSION}"
    CC=musl-gcc ./configure --static --prefix=/usr/local
    make CC=musl-gcc
    make install
    cd ..
    install -Dm644 /usr/local/lib/libz.a /usr/lib/x86_64-linux-musl/libz.a

elif [[ $1 = native-image ]]; then
    shift
    GRAAL_ROOT="${GRAAL_ROOT:-$HOME/.local/share/graalvm}"

    # Look for GraalVM location if not set ahead of time
    if [[ -z $GRAAL_HOME ]]; then
        if [[ ! -d $GRAAL_ROOT ]]; then
            echo "GRAAL_ROOT is not a valid directory: $GRAAL_ROOT" >&2
            exit 2
        fi
        GRAAL_HOME="$(for dir in "$GRAAL_ROOT"/graalvm-*; do echo "$dir"; done | sort | tail -n 1)"
        # Special case for the MacOS version
        if [[ -n $GRAAL_HOME && -d "${GRAAL_HOME}/Contents/Home" ]]; then
            GRAAL_HOME="${GRAAL_HOME}/Contents/Home"
        fi
    fi

    # Make sure we found something to use
    if [[ -z $GRAAL_HOME || ! -d $GRAAL_HOME ]]; then
        echo "GraalVM directory not found under $GRAAL_ROOT" >&2
        echo "Download from https://github.com/graalvm/graalvm-ce-builds/releases and and extract there" >&2
        echo "Alternately, set GRAAL_HOME pointing at the install directory" >&2
        exit 2
    fi

    # Switch to GraalVM SDK
    echo "Using GraalVM from $GRAAL_HOME"
    export JAVA_HOME="${GRAAL_HOME}"
    export PATH="${JAVA_HOME}/bin:${PATH}"

    exec clojure -T:build native-image "$@"

elif [[ $1 = deploy ]]; then
    shift
    if [[ -z $CLOJARS_USERNAME && -z $CLOJARS_PASSWORD && -f $HOME/.clojure/clojars.env ]]; then
        source "${HOME}/.clojure/clojars.env"
    fi
    if [[ -z $CLOJARS_USERNAME ]]; then
        read -rp "Clojars username: " CLOJARS_USERNAME
        if [[ -z $CLOJARS_USERNAME ]]; then
            echo "No username available, aborting" >&2
            exit 1
        fi
    fi
    if [[ -z $CLOJARS_PASSWORD ]]; then
        read -rp "Clojars deploy token: " CLOJARS_PASSWORD
        if [[ -z $CLOJARS_PASSWORD ]]; then
            echo "No deploy token available, aborting" >&2
            exit 1
        fi
    fi
    if [[ -z $CLOJARS_SIGNING_KEY ]]; then
        read -rp "Clojars signing key: " CLOJARS_SIGNING_KEY
        if [[ -z $CLOJARS_SIGNING_KEY ]]; then
            echo "No signing key specified, aborting" >&2
            exit 1
        fi
    fi
    export CLOJARS_USERNAME CLOJARS_PASSWORD CLOJARS_SIGNING_KEY
    exec clojure -T:build deploy "$@"

else
    exec clojure -T:build "$@"
fi
