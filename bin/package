#!/usr/bin/env bash
# vim: ft=bash

set -e

cd "$(dirname "${BASH_SOURCE[0]}")/.."

DIST_FORCE=false
DIST_CLEAN=false
DIST_TARGET=all

usage() {
    echo "bin/package [--clean] [--force] [--target TARGET]" >&2
    echo >&2
    echo "Targets: jar, macos, linux, linux-static" >&2
}

# Parse command-line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            usage
            exit
            ;;
        --clean)
            DIST_CLEAN=true
            shift
            ;;
        --force)
            DIST_FORCE=true
            shift
            ;;
        --target)
            DIST_TARGET="$2"
            shift
            shift
            ;;
        *)
            usage
            exit 1
            ;;
    esac
done

# Determine version, print header
readonly CLJSTYLE_VERSION="$(clojure -T:build print-version | cut -d ' ' -f 2)"
echo -e "\033[0;33mPreparing release distribution for \033[1;33m$CLJSTYLE_VERSION\033[0m"

# Check local repository state
readonly GIT_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
readonly GIT_STATUS="$(git status --porcelain --untracked-files=no)"

if [[ $GIT_BRANCH != main ]]; then
    if [[ $DIST_FORCE != true ]]; then
        echo -e "\033[0;31mAborting packaging from non-main branch $GIT_BRANCH\033[0m" >&2
        exit 1
    else
        echo -e "\033[0;31mWARNING: packaging from non-main branch $GIT_BRANCH\033[0m" >&2
    fi
fi

if [[ -n $GIT_STATUS ]]; then
    if [[ $DIST_FORCE != true ]]; then
        echo -e "\033[0;31mAborting packaging with uncommitted changes:\033[0m" >&2
        echo "$GIT_STATUS" >&2
        exit 1
    else
        echo -e "\033[0;31mWARNING: packaging with uncommitted changes:\033[0m" >&2
        echo "$GIT_STATUS" >&2
    fi
fi

# Clean artifacts if requested
if [[ $DIST_CLEAN == true ]]; then
  rm -rf dist target
fi

mkdir -p dist
echo

# Java uberjar artifact
if [[ $DIST_TARGET == all || $DIST_TARGET == jar ]]; then
    CLJSTYLE_JAR_ARTIFACT="dist/cljstyle-${CLJSTYLE_VERSION}.jar"
    if [[ ! -f $CLJSTYLE_JAR_ARTIFACT ]]; then
        echo -e "\033[0;36mBuilding uberjar with $(java -version 2>&1 | head -n 1)\033[0m"
        bin/build uberjar
        cp target/cljstyle.jar "dist/cljstyle-${CLJSTYLE_VERSION}.jar"
        echo
    fi
fi

# MacOS native image
if [[ $DIST_TARGET == all || $DIST_TARGET == macos ]]; then
    CLJSTYLE_MACOS_ARTIFACT="dist/cljstyle_${CLJSTYLE_VERSION}_macos_$(uname -m).zip"
    if [[ ! -f $CLJSTYLE_MACOS_ARTIFACT ]]; then
        if [[ $(uname -s) = Darwin ]]; then
            echo -e "\033[0;36mBuilding MacOS $(uname -m) binary\033[0m"
            bin/build native-image
            if [[ ! -f target/graal/cljstyle ]]; then
                echo -e "\033[0;31mPackaging step did not produce an executable!\033[0m" >&2
                exit 1
            fi
            (
                cd target/graal
                zip cljstyle.zip cljstyle
            )
            mv target/graal/cljstyle.zip "$CLJSTYLE_MACOS_ARTIFACT"
        else
            echo -e "\033[0;31mWARNING: Skipping MacOS binary, must build on a Darwin platform\033[0m"
        fi
        echo
    fi
fi

# Linux native image
if [[ $DIST_TARGET == all || $DIST_TARGET == linux ]]; then
    CLJSTYLE_LINUX_ARTIFACT="dist/cljstyle_${CLJSTYLE_VERSION}_linux_amd64.zip"
    if [[ ! -f $CLJSTYLE_LINUX_ARTIFACT ]]; then
        echo -e "\033[0;36mBuilding Linux amd64 binary\033[0m"
        rm -rf target/dist/linux
        mkdir -p target/dist/linux
        docker build \
            --platform linux/amd64 \
            -t "cljstyle-builder:$CLJSTYLE_VERSION" \
            .
        DOCKER_CONTAINER_ID=$(docker create --platform linux/amd64 "cljstyle-builder:$CLJSTYLE_VERSION")
        docker cp "${DOCKER_CONTAINER_ID}:/usr/local/bin/cljstyle" target/dist/linux/cljstyle
        docker container rm "$DOCKER_CONTAINER_ID"
        if [[ ! -f target/dist/linux/cljstyle ]]; then
            echo -e "\033[0;31mPackaging step did not produce an executable!\033[0m" >&2
            exit 1
        fi
        (
            cd target/dist/linux
            zip cljstyle.zip cljstyle
        )
        mv target/dist/linux/cljstyle.zip "$CLJSTYLE_LINUX_ARTIFACT"
        echo
    fi
fi

# Linux static native image
if [[ $DIST_TARGET == all || $DIST_TARGET == linux-static ]]; then
    CLJSTYLE_LINUX_STATIC_ARTIFACT="dist/cljstyle_${CLJSTYLE_VERSION}_linux_amd64_static.zip"
    if [[ ! -f $CLJSTYLE_LINUX_STATIC_ARTIFACT ]]; then
        echo -e "\033[0;36mBuilding Linux amd64 static binary\033[0m"
        rm -rf target/dist/linux-static
        mkdir -p target/dist/linux-static
        docker build \
            --platform linux/amd64 \
            --build-arg GRAAL_STATIC=true \
            -t "cljstyle-static-builder:$CLJSTYLE_VERSION" \
            .
        DOCKER_CONTAINER_ID=$(docker create --platform linux/amd64 "cljstyle-static-builder:$CLJSTYLE_VERSION")
        docker cp "${DOCKER_CONTAINER_ID}:/usr/local/bin/cljstyle" target/dist/linux-static/cljstyle
        docker container rm "$DOCKER_CONTAINER_ID"
        if [[ ! -f target/dist/linux-static/cljstyle ]]; then
            echo -e "\033[0;31mPackaging step did not produce an executable!\033[0m" >&2
            exit 1
        fi
        (
            cd target/dist/linux-static
            zip cljstyle.zip cljstyle
        )
        mv target/dist/linux-static/cljstyle.zip "$CLJSTYLE_LINUX_STATIC_ARTIFACT"
        echo
    fi
fi

# Done
ls -lh dist
