#!/usr/bin/env bash
# vim: ft=bash

set -e

cd "$(dirname "${BASH_SOURCE[0]}")/.."

CLJSTYLE_VERSION="$(clojure -T:build print-version | cut -d ' ' -f 2)"
# TODO: check that we're on main branch
# TODO: check for dirty git state?
# TODO: check that VERSION.txt matches?

echo "Preparing full release distribution for $CLJSTYLE_VERSION"

if [[ $1 = --clean ]]; then
    rm -rf dist target
fi

mkdir -p dist
echo

# Java uberjar artifact
CLJSTYLE_JAR_ARTIFACT="dist/cljstyle-${CLJSTYLE_VERSION}.jar"
if [[ ! -f $CLJSTYLE_JAR_ARTIFACT ]]; then
    echo "Building uberjar with $(java -version 2>&1 | head -n 1)"
    clojure -T:build uberjar
    cp target/cljstyle.jar "dist/cljstyle-${CLJSTYLE_VERSION}.jar"
    echo
fi

# MacOS native image
CLJSTYLE_MACOS_ARTIFACT="dist/cljstyle_${CLJSTYLE_VERSION}_macos_$(uname -m).zip"
if [[ ! -f $CLJSTYLE_MACOS_ARTIFACT ]]; then
    if [[ $(uname -s) = Darwin ]]; then
        echo "Building MacOS $(uname -m) binary"
        (
            # TODO: better graal detection here
            export GRAAL_HOME="$HOME/.local/share/graalvm/latest"
            export JAVA_HOME="$GRAAL_HOME/bin"
            export PATH="$JAVA_HOME:$PATH"
            clojure -T:build native-image
        )
        if [[ ! -f target/graal/cljstyle ]]; then
            echo "Packaging step did not produce an executable!" >&2
            exit 1
        fi
        (
            cd target/graal
            zip cljstyle.zip cljstyle
        )
        mv target/graal/cljstyle.zip $CLJSTYLE_MACOS_ARTIFACT
    else
        echo "Skipping MacOS binary, must build on a Darwin platform"
    fi
    echo
fi

# Linux native image
CLJSTYLE_LINUX_ARTIFACT="dist/cljstyle_${CLJSTYLE_VERSION}_linux_amd64.zip"
if [[ ! -f $CLJSTYLE_LINUX_ARTIFACT ]]; then
    echo "Building Linux binary"
    rm -rf target/dist/linux
    mkdir -p target/dist/linux
    docker build -t cljstyle-builder:$CLJSTYLE_VERSION .
    DOCKER_CONTAINER_ID=$(docker create cljstyle-builder:$CLJSTYLE_VERSION)
    docker cp "${DOCKER_CONTAINER_ID}:/usr/local/bin/cljstyle" target/dist/linux/cljstyle
    docker container rm $DOCKER_CONTAINER_ID
    if [[ ! -f target/dist/linux/cljstyle ]]; then
        echo "Packaging step did not produce an executable!" >&2
        exit 1
    fi
    (
        cd target/dist/linux
        zip cljstyle.zip cljstyle
    )
    mv target/dist/linux/cljstyle.zip $CLJSTYLE_LINUX_ARTIFACT
    echo
fi

# Linux static native image
CLJSTYLE_LINUX_STATIC_ARTIFACT="dist/cljstyle_${CLJSTYLE_VERSION}_linux_amd64_static.zip"
if [[ ! -f $CLJSTYLE_LINUX_STATIC_ARTIFACT ]]; then
    echo "Building Linux static binary"
    rm -rf target/dist/linux-static
    mkdir -p target/dist/linux-static
    docker build --build-arg GRAAL_STATIC=true -t cljstyle-static-builder:$CLJSTYLE_VERSION .
    DOCKER_CONTAINER_ID=$(docker create cljstyle-static-builder:$CLJSTYLE_VERSION)
    docker cp "${DOCKER_CONTAINER_ID}:/usr/local/bin/cljstyle" target/dist/linux-static/cljstyle
    docker container rm $DOCKER_CONTAINER_ID
    if [[ ! -f target/dist/linux-static/cljstyle ]]; then
        echo "Packaging step did not produce an executable!" >&2
        exit 1
    fi
    (
        cd target/dist/linux-static
        zip cljstyle.zip cljstyle
    )
    mv target/dist/linux-static/cljstyle.zip $CLJSTYLE_LINUX_STATIC_ARTIFACT
    echo
fi

# Done
ls -lh dist
